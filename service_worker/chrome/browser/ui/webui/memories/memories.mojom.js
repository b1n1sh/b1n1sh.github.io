// chrome/browser/ui/webui/memories/memories.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/memories/memories.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('memories.mojom');
  var memories$ =
      mojo.internal.exposeNamespace('memories.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/memories/core/memories.mojom', '../../../../../components/memories/core/memories.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function MemoriesResult(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MemoriesResult.prototype.initDefaults_ = function() {
    this.title = null;
    this.thumbnailUrl = null;
    this.memories = null;
  };
  MemoriesResult.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MemoriesResult.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MemoriesResult.title
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MemoriesResult.thumbnailUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MemoriesResult.memories
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(memories$.Memory), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MemoriesResult.encodedSize = codec.kStructHeaderSize + 24;

  MemoriesResult.decode = function(decoder) {
    var packed;
    var val = new MemoriesResult();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.title =
        decoder.decodeStructPointer(string16$.String16);
    val.thumbnailUrl =
        decoder.decodeStructPointer(url$.Url);
    val.memories =
        decoder.decodeArrayPointer(new codec.PointerTo(memories$.Memory));
    return val;
  };

  MemoriesResult.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MemoriesResult.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.title);
    encoder.encodeStructPointer(url$.Url, val.thumbnailUrl);
    encoder.encodeArrayPointer(new codec.PointerTo(memories$.Memory), val.memories);
  };
  function PageHandler_SetPage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetPage_Params.prototype.initDefaults_ = function() {
    this.page = new PagePtr();
  };
  PageHandler_SetPage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetPage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetPage_Params.page
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SetPage_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SetPage_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetPage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStruct(new codec.Interface(PagePtr));
    return val;
  };

  PageHandler_SetPage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetPage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(PagePtr), val.page);
  };
  function PageHandler_GetSampleMemories_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetSampleMemories_Params.prototype.initDefaults_ = function() {
    this.query = null;
  };
  PageHandler_GetSampleMemories_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetSampleMemories_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetSampleMemories_Params.query
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetSampleMemories_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetSampleMemories_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetSampleMemories_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.query =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_GetSampleMemories_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetSampleMemories_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.query);
  };
  function PageHandler_GetSampleMemories_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetSampleMemories_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  PageHandler_GetSampleMemories_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetSampleMemories_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetSampleMemories_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MemoriesResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetSampleMemories_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetSampleMemories_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetSampleMemories_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(MemoriesResult);
    return val;
  };

  PageHandler_GetSampleMemories_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetSampleMemories_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MemoriesResult, val.result);
  };
  var kPageHandler_SetPage_Name = 1114323466;
  var kPageHandler_GetSampleMemories_Name = 1733706205;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.setPage = function() {
    return PageHandlerProxy.prototype.setPage
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setPage = function(page) {
    var params_ = new PageHandler_SetPage_Params();
    params_.page = page;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetPage_Name,
        codec.align(PageHandler_SetPage_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetPage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.getSampleMemories = function() {
    return PageHandlerProxy.prototype.getSampleMemories
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getSampleMemories = function(query) {
    var params_ = new PageHandler_GetSampleMemories_Params();
    params_.query = query;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetSampleMemories_Name,
          codec.align(PageHandler_GetSampleMemories_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetSampleMemories_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetSampleMemories_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.setPage = function(page) {
    return this.delegate_ && this.delegate_.setPage && this.delegate_.setPage(page);
  }
  PageHandlerStub.prototype.getSampleMemories = function(query) {
    return this.delegate_ && this.delegate_.getSampleMemories && this.delegate_.getSampleMemories(query);
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_SetPage_Name:
      var params = reader.decodeStruct(PageHandler_SetPage_Params);
      this.setPage(params.page);
      return true;
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_GetSampleMemories_Name:
      var params = reader.decodeStruct(PageHandler_GetSampleMemories_Params);
      this.getSampleMemories(params.query).then(function(response) {
        var responseParams =
            new PageHandler_GetSampleMemories_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetSampleMemories_Name,
            codec.align(PageHandler_GetSampleMemories_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetSampleMemories_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_SetPage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetPage_Params;
      break;
      case kPageHandler_GetSampleMemories_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetSampleMemories_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPageHandler_GetSampleMemories_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetSampleMemories_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PageHandler = {
    name: 'memories.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: validatePageHandlerResponse,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = validatePageHandlerResponse;

  function PagePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Page,
                                                   handleOrPtrInfo);
  }

  function PageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Page, associatedInterfacePtrInfo);
  }

  PageAssociatedPtr.prototype =
      Object.create(PagePtr.prototype);
  PageAssociatedPtr.prototype.constructor =
      PageAssociatedPtr;

  function PageProxy(receiver) {
    this.receiver_ = receiver;
  }

  function PageStub(delegate) {
    this.delegate_ = delegate;
  }

  PageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validatePageResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Page = {
    name: 'memories.mojom.Page',
    kVersion: 0,
    ptrClass: PagePtr,
    proxyClass: PageProxy,
    stubClass: PageStub,
    validateRequest: validatePageRequest,
    validateResponse: null,
  };
  PageStub.prototype.validator = validatePageRequest;
  PageProxy.prototype.validator = null;
  exports.MemoriesResult = MemoriesResult;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
  exports.Page = Page;
  exports.PagePtr = PagePtr;
  exports.PageAssociatedPtr = PageAssociatedPtr;
})();