// third_party/blink/public/mojom/payments/payment_credential.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/payments/payment_credential.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('payments.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var PaymentCredentialStorageStatus = {};
  PaymentCredentialStorageStatus.SUCCESS = 0;
  PaymentCredentialStorageStatus.FAILED_TO_STORE_INSTRUMENT = 1;
  PaymentCredentialStorageStatus.MIN_VALUE = 0;
  PaymentCredentialStorageStatus.MAX_VALUE = 1;

  PaymentCredentialStorageStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  PaymentCredentialStorageStatus.toKnownEnumValue = function(value) {
    return value;
  };

  PaymentCredentialStorageStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var PaymentCredentialUserPromptStatus = {};
  PaymentCredentialUserPromptStatus.FAILED_TO_DOWNLOAD_ICON = 0;
  PaymentCredentialUserPromptStatus.USER_CONFIRM_FROM_UI = 1;
  PaymentCredentialUserPromptStatus.USER_CANCEL_FROM_UI = 2;
  PaymentCredentialUserPromptStatus.MIN_VALUE = 0;
  PaymentCredentialUserPromptStatus.MAX_VALUE = 2;

  PaymentCredentialUserPromptStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  PaymentCredentialUserPromptStatus.toKnownEnumValue = function(value) {
    return value;
  };

  PaymentCredentialUserPromptStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PaymentCredentialInstrument(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaymentCredentialInstrument.prototype.initDefaults_ = function() {
    this.displayName = null;
    this.icon = null;
  };
  PaymentCredentialInstrument.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaymentCredentialInstrument.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredentialInstrument.displayName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredentialInstrument.icon
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaymentCredentialInstrument.encodedSize = codec.kStructHeaderSize + 16;

  PaymentCredentialInstrument.decode = function(decoder) {
    var packed;
    var val = new PaymentCredentialInstrument();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.displayName =
        decoder.decodeStruct(codec.String);
    val.icon =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PaymentCredentialInstrument.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaymentCredentialInstrument.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.displayName);
    encoder.encodeStructPointer(url$.Url, val.icon);
  };
  function PaymentCredential_DownloadIconAndShowUserPrompt_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaymentCredential_DownloadIconAndShowUserPrompt_Params.prototype.initDefaults_ = function() {
    this.instrument = null;
  };
  PaymentCredential_DownloadIconAndShowUserPrompt_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaymentCredential_DownloadIconAndShowUserPrompt_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredential_DownloadIconAndShowUserPrompt_Params.instrument
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PaymentCredentialInstrument, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaymentCredential_DownloadIconAndShowUserPrompt_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaymentCredential_DownloadIconAndShowUserPrompt_Params.decode = function(decoder) {
    var packed;
    var val = new PaymentCredential_DownloadIconAndShowUserPrompt_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instrument =
        decoder.decodeStructPointer(PaymentCredentialInstrument);
    return val;
  };

  PaymentCredential_DownloadIconAndShowUserPrompt_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaymentCredential_DownloadIconAndShowUserPrompt_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PaymentCredentialInstrument, val.instrument);
  };
  function PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PaymentCredentialUserPromptStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PaymentCredentialUserPromptStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.prototype.initDefaults_ = function() {
    this.instrument = null;
    this.credentialId = null;
    this.rpId = null;
  };
  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.instrument
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PaymentCredentialInstrument, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.credentialId
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.rpId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.encodedSize = codec.kStructHeaderSize + 24;

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.decode = function(decoder) {
    var packed;
    var val = new PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instrument =
        decoder.decodeStructPointer(PaymentCredentialInstrument);
    val.credentialId =
        decoder.decodeArrayPointer(codec.Uint8);
    val.rpId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PaymentCredentialInstrument, val.instrument);
    encoder.encodeArrayPointer(codec.Uint8, val.credentialId);
    encoder.encodeStruct(codec.String, val.rpId);
  };
  function PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PaymentCredentialStorageStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PaymentCredentialStorageStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PaymentCredential_HideUserPrompt_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaymentCredential_HideUserPrompt_Params.prototype.initDefaults_ = function() {
  };
  PaymentCredential_HideUserPrompt_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaymentCredential_HideUserPrompt_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaymentCredential_HideUserPrompt_Params.encodedSize = codec.kStructHeaderSize + 0;

  PaymentCredential_HideUserPrompt_Params.decode = function(decoder) {
    var packed;
    var val = new PaymentCredential_HideUserPrompt_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PaymentCredential_HideUserPrompt_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaymentCredential_HideUserPrompt_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PaymentCredential_HideUserPrompt_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaymentCredential_HideUserPrompt_ResponseParams.prototype.initDefaults_ = function() {
  };
  PaymentCredential_HideUserPrompt_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaymentCredential_HideUserPrompt_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaymentCredential_HideUserPrompt_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PaymentCredential_HideUserPrompt_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaymentCredential_HideUserPrompt_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PaymentCredential_HideUserPrompt_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaymentCredential_HideUserPrompt_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kPaymentCredential_DownloadIconAndShowUserPrompt_Name = 0;
  var kPaymentCredential_StorePaymentCredentialAndHideUserPrompt_Name = 1;
  var kPaymentCredential_HideUserPrompt_Name = 2;

  function PaymentCredentialPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PaymentCredential,
                                                   handleOrPtrInfo);
  }

  function PaymentCredentialAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PaymentCredential, associatedInterfacePtrInfo);
  }

  PaymentCredentialAssociatedPtr.prototype =
      Object.create(PaymentCredentialPtr.prototype);
  PaymentCredentialAssociatedPtr.prototype.constructor =
      PaymentCredentialAssociatedPtr;

  function PaymentCredentialProxy(receiver) {
    this.receiver_ = receiver;
  }
  PaymentCredentialPtr.prototype.downloadIconAndShowUserPrompt = function() {
    return PaymentCredentialProxy.prototype.downloadIconAndShowUserPrompt
        .apply(this.ptr.getProxy(), arguments);
  };

  PaymentCredentialProxy.prototype.downloadIconAndShowUserPrompt = function(instrument) {
    var params_ = new PaymentCredential_DownloadIconAndShowUserPrompt_Params();
    params_.instrument = instrument;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaymentCredential_DownloadIconAndShowUserPrompt_Name,
          codec.align(PaymentCredential_DownloadIconAndShowUserPrompt_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaymentCredential_DownloadIconAndShowUserPrompt_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PaymentCredentialPtr.prototype.storePaymentCredentialAndHideUserPrompt = function() {
    return PaymentCredentialProxy.prototype.storePaymentCredentialAndHideUserPrompt
        .apply(this.ptr.getProxy(), arguments);
  };

  PaymentCredentialProxy.prototype.storePaymentCredentialAndHideUserPrompt = function(instrument, credentialId, rpId) {
    var params_ = new PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params();
    params_.instrument = instrument;
    params_.credentialId = credentialId;
    params_.rpId = rpId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaymentCredential_StorePaymentCredentialAndHideUserPrompt_Name,
          codec.align(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PaymentCredentialPtr.prototype.hideUserPrompt = function() {
    return PaymentCredentialProxy.prototype.hideUserPrompt
        .apply(this.ptr.getProxy(), arguments);
  };

  PaymentCredentialProxy.prototype.hideUserPrompt = function() {
    var params_ = new PaymentCredential_HideUserPrompt_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaymentCredential_HideUserPrompt_Name,
          codec.align(PaymentCredential_HideUserPrompt_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaymentCredential_HideUserPrompt_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaymentCredential_HideUserPrompt_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PaymentCredentialStub(delegate) {
    this.delegate_ = delegate;
  }
  PaymentCredentialStub.prototype.downloadIconAndShowUserPrompt = function(instrument) {
    return this.delegate_ && this.delegate_.downloadIconAndShowUserPrompt && this.delegate_.downloadIconAndShowUserPrompt(instrument);
  }
  PaymentCredentialStub.prototype.storePaymentCredentialAndHideUserPrompt = function(instrument, credentialId, rpId) {
    return this.delegate_ && this.delegate_.storePaymentCredentialAndHideUserPrompt && this.delegate_.storePaymentCredentialAndHideUserPrompt(instrument, credentialId, rpId);
  }
  PaymentCredentialStub.prototype.hideUserPrompt = function() {
    return this.delegate_ && this.delegate_.hideUserPrompt && this.delegate_.hideUserPrompt();
  }

  PaymentCredentialStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PaymentCredentialStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPaymentCredential_DownloadIconAndShowUserPrompt_Name:
      var params = reader.decodeStruct(PaymentCredential_DownloadIconAndShowUserPrompt_Params);
      this.downloadIconAndShowUserPrompt(params.instrument).then(function(response) {
        var responseParams =
            new PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kPaymentCredential_DownloadIconAndShowUserPrompt_Name,
            codec.align(PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPaymentCredential_StorePaymentCredentialAndHideUserPrompt_Name:
      var params = reader.decodeStruct(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params);
      this.storePaymentCredentialAndHideUserPrompt(params.instrument, params.credentialId, params.rpId).then(function(response) {
        var responseParams =
            new PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kPaymentCredential_StorePaymentCredentialAndHideUserPrompt_Name,
            codec.align(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPaymentCredential_HideUserPrompt_Name:
      var params = reader.decodeStruct(PaymentCredential_HideUserPrompt_Params);
      this.hideUserPrompt().then(function(response) {
        var responseParams =
            new PaymentCredential_HideUserPrompt_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPaymentCredential_HideUserPrompt_Name,
            codec.align(PaymentCredential_HideUserPrompt_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaymentCredential_HideUserPrompt_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePaymentCredentialRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPaymentCredential_DownloadIconAndShowUserPrompt_Name:
        if (message.expectsResponse())
          paramsClass = PaymentCredential_DownloadIconAndShowUserPrompt_Params;
      break;
      case kPaymentCredential_StorePaymentCredentialAndHideUserPrompt_Name:
        if (message.expectsResponse())
          paramsClass = PaymentCredential_StorePaymentCredentialAndHideUserPrompt_Params;
      break;
      case kPaymentCredential_HideUserPrompt_Name:
        if (message.expectsResponse())
          paramsClass = PaymentCredential_HideUserPrompt_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePaymentCredentialResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPaymentCredential_DownloadIconAndShowUserPrompt_Name:
        if (message.isResponse())
          paramsClass = PaymentCredential_DownloadIconAndShowUserPrompt_ResponseParams;
        break;
      case kPaymentCredential_StorePaymentCredentialAndHideUserPrompt_Name:
        if (message.isResponse())
          paramsClass = PaymentCredential_StorePaymentCredentialAndHideUserPrompt_ResponseParams;
        break;
      case kPaymentCredential_HideUserPrompt_Name:
        if (message.isResponse())
          paramsClass = PaymentCredential_HideUserPrompt_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PaymentCredential = {
    name: 'payments.mojom.PaymentCredential',
    kVersion: 0,
    ptrClass: PaymentCredentialPtr,
    proxyClass: PaymentCredentialProxy,
    stubClass: PaymentCredentialStub,
    validateRequest: validatePaymentCredentialRequest,
    validateResponse: validatePaymentCredentialResponse,
  };
  PaymentCredentialStub.prototype.validator = validatePaymentCredentialRequest;
  PaymentCredentialProxy.prototype.validator = validatePaymentCredentialResponse;
  exports.PaymentCredentialStorageStatus = PaymentCredentialStorageStatus;
  exports.PaymentCredentialUserPromptStatus = PaymentCredentialUserPromptStatus;
  exports.PaymentCredentialInstrument = PaymentCredentialInstrument;
  exports.PaymentCredential = PaymentCredential;
  exports.PaymentCredentialPtr = PaymentCredentialPtr;
  exports.PaymentCredentialAssociatedPtr = PaymentCredentialAssociatedPtr;
})();